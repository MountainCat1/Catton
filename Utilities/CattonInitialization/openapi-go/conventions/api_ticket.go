/*
Conventions.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TicketAPIService TicketAPI service
type TicketAPIService service

type ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsGetRequest struct {
	ctx context.Context
	ApiService *TicketAPIService
	conventionId string
	attendeeId string
}

func (r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsGetRequest) Execute() (*TicketDto, *http.Response, error) {
	return r.ApiService.ApiConventionsConventionIdAttendeesAttendeeIdTicketsGetExecute(r)
}

/*
ApiConventionsConventionIdAttendeesAttendeeIdTicketsGet Method for ApiConventionsConventionIdAttendeesAttendeeIdTicketsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param conventionId
 @param attendeeId
 @return ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsGetRequest
*/
func (a *TicketAPIService) ApiConventionsConventionIdAttendeesAttendeeIdTicketsGet(ctx context.Context, conventionId string, attendeeId string) ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsGetRequest {
	return ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsGetRequest{
		ApiService: a,
		ctx: ctx,
		conventionId: conventionId,
		attendeeId: attendeeId,
	}
}

// Execute executes the request
//  @return TicketDto
func (a *TicketAPIService) ApiConventionsConventionIdAttendeesAttendeeIdTicketsGetExecute(r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsGetRequest) (*TicketDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketAPIService.ApiConventionsConventionIdAttendeesAttendeeIdTicketsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/conventions/{conventionId}/attendees/{attendeeId}/tickets"
	localVarPath = strings.Replace(localVarPath, "{"+"conventionId"+"}", url.PathEscape(parameterValueToString(r.conventionId, "conventionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attendeeId"+"}", url.PathEscape(parameterValueToString(r.attendeeId, "attendeeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsPostRequest struct {
	ctx context.Context
	ApiService *TicketAPIService
	conventionId string
	attendeeId string
	ticketCreateDto *TicketCreateDto
}

func (r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsPostRequest) TicketCreateDto(ticketCreateDto TicketCreateDto) ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsPostRequest {
	r.ticketCreateDto = &ticketCreateDto
	return r
}

func (r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsPostRequest) Execute() (*TicketDto, *http.Response, error) {
	return r.ApiService.ApiConventionsConventionIdAttendeesAttendeeIdTicketsPostExecute(r)
}

/*
ApiConventionsConventionIdAttendeesAttendeeIdTicketsPost Method for ApiConventionsConventionIdAttendeesAttendeeIdTicketsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param conventionId
 @param attendeeId
 @return ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsPostRequest
*/
func (a *TicketAPIService) ApiConventionsConventionIdAttendeesAttendeeIdTicketsPost(ctx context.Context, conventionId string, attendeeId string) ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsPostRequest {
	return ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsPostRequest{
		ApiService: a,
		ctx: ctx,
		conventionId: conventionId,
		attendeeId: attendeeId,
	}
}

// Execute executes the request
//  @return TicketDto
func (a *TicketAPIService) ApiConventionsConventionIdAttendeesAttendeeIdTicketsPostExecute(r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsPostRequest) (*TicketDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketAPIService.ApiConventionsConventionIdAttendeesAttendeeIdTicketsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/conventions/{conventionId}/attendees/{attendeeId}/tickets"
	localVarPath = strings.Replace(localVarPath, "{"+"conventionId"+"}", url.PathEscape(parameterValueToString(r.conventionId, "conventionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attendeeId"+"}", url.PathEscape(parameterValueToString(r.attendeeId, "attendeeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ticketCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDeleteRequest struct {
	ctx context.Context
	ApiService *TicketAPIService
	conventionId string
	ticketId string
	attendeeId string
}

func (r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDeleteRequest) Execute() (*TicketDto, *http.Response, error) {
	return r.ApiService.ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDeleteExecute(r)
}

/*
ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDelete Method for ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param conventionId
 @param ticketId
 @param attendeeId
 @return ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDeleteRequest
*/
func (a *TicketAPIService) ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDelete(ctx context.Context, conventionId string, ticketId string, attendeeId string) ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDeleteRequest {
	return ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		conventionId: conventionId,
		ticketId: ticketId,
		attendeeId: attendeeId,
	}
}

// Execute executes the request
//  @return TicketDto
func (a *TicketAPIService) ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDeleteExecute(r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDeleteRequest) (*TicketDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketAPIService.ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/conventions/{conventionId}/attendees/{attendeeId}/tickets/{ticketId}"
	localVarPath = strings.Replace(localVarPath, "{"+"conventionId"+"}", url.PathEscape(parameterValueToString(r.conventionId, "conventionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ticketId"+"}", url.PathEscape(parameterValueToString(r.ticketId, "ticketId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attendeeId"+"}", url.PathEscape(parameterValueToString(r.attendeeId, "attendeeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutRequest struct {
	ctx context.Context
	ApiService *TicketAPIService
	conventionId string
	ticketId string
	attendeeId string
	body *map[string]interface{}
}

func (r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutRequest) Body(body map[string]interface{}) ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutRequest {
	r.body = &body
	return r
}

func (r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutRequest) Execute() (*TicketDto, *http.Response, error) {
	return r.ApiService.ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutExecute(r)
}

/*
ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPut Method for ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param conventionId
 @param ticketId
 @param attendeeId
 @return ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutRequest
*/
func (a *TicketAPIService) ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPut(ctx context.Context, conventionId string, ticketId string, attendeeId string) ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutRequest {
	return ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutRequest{
		ApiService: a,
		ctx: ctx,
		conventionId: conventionId,
		ticketId: ticketId,
		attendeeId: attendeeId,
	}
}

// Execute executes the request
//  @return TicketDto
func (a *TicketAPIService) ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutExecute(r ApiApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPutRequest) (*TicketDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketAPIService.ApiConventionsConventionIdAttendeesAttendeeIdTicketsTicketIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/conventions/{conventionId}/attendees/{attendeeId}/tickets/{ticketId}"
	localVarPath = strings.Replace(localVarPath, "{"+"conventionId"+"}", url.PathEscape(parameterValueToString(r.conventionId, "conventionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ticketId"+"}", url.PathEscape(parameterValueToString(r.ticketId, "ticketId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attendeeId"+"}", url.PathEscape(parameterValueToString(r.attendeeId, "attendeeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiConventionsConventionIdTicketsGetRequest struct {
	ctx context.Context
	ApiService *TicketAPIService
	conventionId string
}

func (r ApiApiConventionsConventionIdTicketsGetRequest) Execute() ([]TicketDto, *http.Response, error) {
	return r.ApiService.ApiConventionsConventionIdTicketsGetExecute(r)
}

/*
ApiConventionsConventionIdTicketsGet Method for ApiConventionsConventionIdTicketsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param conventionId
 @return ApiApiConventionsConventionIdTicketsGetRequest
*/
func (a *TicketAPIService) ApiConventionsConventionIdTicketsGet(ctx context.Context, conventionId string) ApiApiConventionsConventionIdTicketsGetRequest {
	return ApiApiConventionsConventionIdTicketsGetRequest{
		ApiService: a,
		ctx: ctx,
		conventionId: conventionId,
	}
}

// Execute executes the request
//  @return []TicketDto
func (a *TicketAPIService) ApiConventionsConventionIdTicketsGetExecute(r ApiApiConventionsConventionIdTicketsGetRequest) ([]TicketDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TicketDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketAPIService.ApiConventionsConventionIdTicketsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/conventions/{conventionId}/tickets"
	localVarPath = strings.Replace(localVarPath, "{"+"conventionId"+"}", url.PathEscape(parameterValueToString(r.conventionId, "conventionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiConventionsConventionIdTicketsTicketIdGetRequest struct {
	ctx context.Context
	ApiService *TicketAPIService
	conventionId string
	ticketId string
}

func (r ApiApiConventionsConventionIdTicketsTicketIdGetRequest) Execute() (*TicketDto, *http.Response, error) {
	return r.ApiService.ApiConventionsConventionIdTicketsTicketIdGetExecute(r)
}

/*
ApiConventionsConventionIdTicketsTicketIdGet Method for ApiConventionsConventionIdTicketsTicketIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param conventionId
 @param ticketId
 @return ApiApiConventionsConventionIdTicketsTicketIdGetRequest
*/
func (a *TicketAPIService) ApiConventionsConventionIdTicketsTicketIdGet(ctx context.Context, conventionId string, ticketId string) ApiApiConventionsConventionIdTicketsTicketIdGetRequest {
	return ApiApiConventionsConventionIdTicketsTicketIdGetRequest{
		ApiService: a,
		ctx: ctx,
		conventionId: conventionId,
		ticketId: ticketId,
	}
}

// Execute executes the request
//  @return TicketDto
func (a *TicketAPIService) ApiConventionsConventionIdTicketsTicketIdGetExecute(r ApiApiConventionsConventionIdTicketsTicketIdGetRequest) (*TicketDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketAPIService.ApiConventionsConventionIdTicketsTicketIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/conventions/{conventionId}/tickets/{ticketId}"
	localVarPath = strings.Replace(localVarPath, "{"+"conventionId"+"}", url.PathEscape(parameterValueToString(r.conventionId, "conventionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ticketId"+"}", url.PathEscape(parameterValueToString(r.ticketId, "ticketId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
