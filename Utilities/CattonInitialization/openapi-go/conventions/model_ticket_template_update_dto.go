/*
Conventions.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TicketTemplateUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketTemplateUpdateDto{}

// TicketTemplateUpdateDto struct for TicketTemplateUpdateDto
type TicketTemplateUpdateDto struct {
	Description NullableString `json:"description,omitempty"`
	Price NullableFloat64 `json:"price,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Avaliable NullableBool `json:"avaliable,omitempty"`
}

// NewTicketTemplateUpdateDto instantiates a new TicketTemplateUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketTemplateUpdateDto() *TicketTemplateUpdateDto {
	this := TicketTemplateUpdateDto{}
	return &this
}

// NewTicketTemplateUpdateDtoWithDefaults instantiates a new TicketTemplateUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketTemplateUpdateDtoWithDefaults() *TicketTemplateUpdateDto {
	this := TicketTemplateUpdateDto{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTemplateUpdateDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTemplateUpdateDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TicketTemplateUpdateDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TicketTemplateUpdateDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TicketTemplateUpdateDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TicketTemplateUpdateDto) UnsetDescription() {
	o.Description.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTemplateUpdateDto) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTemplateUpdateDto) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *TicketTemplateUpdateDto) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *TicketTemplateUpdateDto) SetPrice(v float64) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *TicketTemplateUpdateDto) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *TicketTemplateUpdateDto) UnsetPrice() {
	o.Price.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTemplateUpdateDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTemplateUpdateDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TicketTemplateUpdateDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TicketTemplateUpdateDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TicketTemplateUpdateDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TicketTemplateUpdateDto) UnsetName() {
	o.Name.Unset()
}

// GetAvaliable returns the Avaliable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTemplateUpdateDto) GetAvaliable() bool {
	if o == nil || IsNil(o.Avaliable.Get()) {
		var ret bool
		return ret
	}
	return *o.Avaliable.Get()
}

// GetAvaliableOk returns a tuple with the Avaliable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTemplateUpdateDto) GetAvaliableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avaliable.Get(), o.Avaliable.IsSet()
}

// HasAvaliable returns a boolean if a field has been set.
func (o *TicketTemplateUpdateDto) HasAvaliable() bool {
	if o != nil && o.Avaliable.IsSet() {
		return true
	}

	return false
}

// SetAvaliable gets a reference to the given NullableBool and assigns it to the Avaliable field.
func (o *TicketTemplateUpdateDto) SetAvaliable(v bool) {
	o.Avaliable.Set(&v)
}
// SetAvaliableNil sets the value for Avaliable to be an explicit nil
func (o *TicketTemplateUpdateDto) SetAvaliableNil() {
	o.Avaliable.Set(nil)
}

// UnsetAvaliable ensures that no value is present for Avaliable, not even an explicit nil
func (o *TicketTemplateUpdateDto) UnsetAvaliable() {
	o.Avaliable.Unset()
}

func (o TicketTemplateUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketTemplateUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Avaliable.IsSet() {
		toSerialize["avaliable"] = o.Avaliable.Get()
	}
	return toSerialize, nil
}

type NullableTicketTemplateUpdateDto struct {
	value *TicketTemplateUpdateDto
	isSet bool
}

func (v NullableTicketTemplateUpdateDto) Get() *TicketTemplateUpdateDto {
	return v.value
}

func (v *NullableTicketTemplateUpdateDto) Set(val *TicketTemplateUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketTemplateUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketTemplateUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketTemplateUpdateDto(val *TicketTemplateUpdateDto) *NullableTicketTemplateUpdateDto {
	return &NullableTicketTemplateUpdateDto{value: val, isSet: true}
}

func (v NullableTicketTemplateUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketTemplateUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


