/*
Conventions.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OrganizerDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizerDto{}

// OrganizerDto struct for OrganizerDto
type OrganizerDto struct {
	AccountId *string `json:"accountId,omitempty"`
	ConventionId NullableString `json:"conventionId,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	Role *OrganizerRole `json:"role,omitempty"`
	AccountUsername NullableString `json:"accountUsername,omitempty"`
	AccountAvatarUri NullableString `json:"accountAvatarUri,omitempty"`
}

// NewOrganizerDto instantiates a new OrganizerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizerDto() *OrganizerDto {
	this := OrganizerDto{}
	return &this
}

// NewOrganizerDtoWithDefaults instantiates a new OrganizerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizerDtoWithDefaults() *OrganizerDto {
	this := OrganizerDto{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *OrganizerDto) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizerDto) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *OrganizerDto) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *OrganizerDto) SetAccountId(v string) {
	o.AccountId = &v
}

// GetConventionId returns the ConventionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizerDto) GetConventionId() string {
	if o == nil || IsNil(o.ConventionId.Get()) {
		var ret string
		return ret
	}
	return *o.ConventionId.Get()
}

// GetConventionIdOk returns a tuple with the ConventionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizerDto) GetConventionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConventionId.Get(), o.ConventionId.IsSet()
}

// HasConventionId returns a boolean if a field has been set.
func (o *OrganizerDto) HasConventionId() bool {
	if o != nil && o.ConventionId.IsSet() {
		return true
	}

	return false
}

// SetConventionId gets a reference to the given NullableString and assigns it to the ConventionId field.
func (o *OrganizerDto) SetConventionId(v string) {
	o.ConventionId.Set(&v)
}
// SetConventionIdNil sets the value for ConventionId to be an explicit nil
func (o *OrganizerDto) SetConventionIdNil() {
	o.ConventionId.Set(nil)
}

// UnsetConventionId ensures that no value is present for ConventionId, not even an explicit nil
func (o *OrganizerDto) UnsetConventionId() {
	o.ConventionId.Unset()
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *OrganizerDto) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizerDto) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *OrganizerDto) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *OrganizerDto) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *OrganizerDto) GetRole() OrganizerRole {
	if o == nil || IsNil(o.Role) {
		var ret OrganizerRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizerDto) GetRoleOk() (*OrganizerRole, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *OrganizerDto) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given OrganizerRole and assigns it to the Role field.
func (o *OrganizerDto) SetRole(v OrganizerRole) {
	o.Role = &v
}

// GetAccountUsername returns the AccountUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizerDto) GetAccountUsername() string {
	if o == nil || IsNil(o.AccountUsername.Get()) {
		var ret string
		return ret
	}
	return *o.AccountUsername.Get()
}

// GetAccountUsernameOk returns a tuple with the AccountUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizerDto) GetAccountUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountUsername.Get(), o.AccountUsername.IsSet()
}

// HasAccountUsername returns a boolean if a field has been set.
func (o *OrganizerDto) HasAccountUsername() bool {
	if o != nil && o.AccountUsername.IsSet() {
		return true
	}

	return false
}

// SetAccountUsername gets a reference to the given NullableString and assigns it to the AccountUsername field.
func (o *OrganizerDto) SetAccountUsername(v string) {
	o.AccountUsername.Set(&v)
}
// SetAccountUsernameNil sets the value for AccountUsername to be an explicit nil
func (o *OrganizerDto) SetAccountUsernameNil() {
	o.AccountUsername.Set(nil)
}

// UnsetAccountUsername ensures that no value is present for AccountUsername, not even an explicit nil
func (o *OrganizerDto) UnsetAccountUsername() {
	o.AccountUsername.Unset()
}

// GetAccountAvatarUri returns the AccountAvatarUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizerDto) GetAccountAvatarUri() string {
	if o == nil || IsNil(o.AccountAvatarUri.Get()) {
		var ret string
		return ret
	}
	return *o.AccountAvatarUri.Get()
}

// GetAccountAvatarUriOk returns a tuple with the AccountAvatarUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizerDto) GetAccountAvatarUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountAvatarUri.Get(), o.AccountAvatarUri.IsSet()
}

// HasAccountAvatarUri returns a boolean if a field has been set.
func (o *OrganizerDto) HasAccountAvatarUri() bool {
	if o != nil && o.AccountAvatarUri.IsSet() {
		return true
	}

	return false
}

// SetAccountAvatarUri gets a reference to the given NullableString and assigns it to the AccountAvatarUri field.
func (o *OrganizerDto) SetAccountAvatarUri(v string) {
	o.AccountAvatarUri.Set(&v)
}
// SetAccountAvatarUriNil sets the value for AccountAvatarUri to be an explicit nil
func (o *OrganizerDto) SetAccountAvatarUriNil() {
	o.AccountAvatarUri.Set(nil)
}

// UnsetAccountAvatarUri ensures that no value is present for AccountAvatarUri, not even an explicit nil
func (o *OrganizerDto) UnsetAccountAvatarUri() {
	o.AccountAvatarUri.Unset()
}

func (o OrganizerDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizerDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if o.ConventionId.IsSet() {
		toSerialize["conventionId"] = o.ConventionId.Get()
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if o.AccountUsername.IsSet() {
		toSerialize["accountUsername"] = o.AccountUsername.Get()
	}
	if o.AccountAvatarUri.IsSet() {
		toSerialize["accountAvatarUri"] = o.AccountAvatarUri.Get()
	}
	return toSerialize, nil
}

type NullableOrganizerDto struct {
	value *OrganizerDto
	isSet bool
}

func (v NullableOrganizerDto) Get() *OrganizerDto {
	return v.value
}

func (v *NullableOrganizerDto) Set(val *OrganizerDto) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizerDto) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizerDto(val *OrganizerDto) *NullableOrganizerDto {
	return &NullableOrganizerDto{value: val, isSet: true}
}

func (v NullableOrganizerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


