/*
Conventions.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TicketDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketDto{}

// TicketDto struct for TicketDto
type TicketDto struct {
	Id *string `json:"id,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
}

// NewTicketDto instantiates a new TicketDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketDto() *TicketDto {
	this := TicketDto{}
	return &this
}

// NewTicketDtoWithDefaults instantiates a new TicketDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketDtoWithDefaults() *TicketDto {
	this := TicketDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TicketDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TicketDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TicketDto) SetId(v string) {
	o.Id = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *TicketDto) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketDto) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *TicketDto) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *TicketDto) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

func (o TicketDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	return toSerialize, nil
}

type NullableTicketDto struct {
	value *TicketDto
	isSet bool
}

func (v NullableTicketDto) Get() *TicketDto {
	return v.value
}

func (v *NullableTicketDto) Set(val *TicketDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketDto(val *TicketDto) *NullableTicketDto {
	return &NullableTicketDto{value: val, isSet: true}
}

func (v NullableTicketDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


