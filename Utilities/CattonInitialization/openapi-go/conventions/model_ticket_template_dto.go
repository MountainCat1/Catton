/*
Conventions.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TicketTemplateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketTemplateDto{}

// TicketTemplateDto struct for TicketTemplateDto
type TicketTemplateDto struct {
	Id *string `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Price *float64 `json:"price,omitempty"`
	Avaliable *bool `json:"avaliable,omitempty"`
	CreateDate *time.Time `json:"createDate,omitempty"`
	ConvetionId NullableString `json:"convetionId,omitempty"`
	LastEditAuthorId NullableString `json:"lastEditAuthorId,omitempty"`
	AuthorId *string `json:"authorId,omitempty"`
}

// NewTicketTemplateDto instantiates a new TicketTemplateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketTemplateDto() *TicketTemplateDto {
	this := TicketTemplateDto{}
	return &this
}

// NewTicketTemplateDtoWithDefaults instantiates a new TicketTemplateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketTemplateDtoWithDefaults() *TicketTemplateDto {
	this := TicketTemplateDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TicketTemplateDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTemplateDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TicketTemplateDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TicketTemplateDto) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTemplateDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTemplateDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TicketTemplateDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TicketTemplateDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TicketTemplateDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TicketTemplateDto) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTemplateDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTemplateDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TicketTemplateDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TicketTemplateDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TicketTemplateDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TicketTemplateDto) UnsetDescription() {
	o.Description.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *TicketTemplateDto) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTemplateDto) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *TicketTemplateDto) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *TicketTemplateDto) SetPrice(v float64) {
	o.Price = &v
}

// GetAvaliable returns the Avaliable field value if set, zero value otherwise.
func (o *TicketTemplateDto) GetAvaliable() bool {
	if o == nil || IsNil(o.Avaliable) {
		var ret bool
		return ret
	}
	return *o.Avaliable
}

// GetAvaliableOk returns a tuple with the Avaliable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTemplateDto) GetAvaliableOk() (*bool, bool) {
	if o == nil || IsNil(o.Avaliable) {
		return nil, false
	}
	return o.Avaliable, true
}

// HasAvaliable returns a boolean if a field has been set.
func (o *TicketTemplateDto) HasAvaliable() bool {
	if o != nil && !IsNil(o.Avaliable) {
		return true
	}

	return false
}

// SetAvaliable gets a reference to the given bool and assigns it to the Avaliable field.
func (o *TicketTemplateDto) SetAvaliable(v bool) {
	o.Avaliable = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *TicketTemplateDto) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTemplateDto) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *TicketTemplateDto) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *TicketTemplateDto) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetConvetionId returns the ConvetionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTemplateDto) GetConvetionId() string {
	if o == nil || IsNil(o.ConvetionId.Get()) {
		var ret string
		return ret
	}
	return *o.ConvetionId.Get()
}

// GetConvetionIdOk returns a tuple with the ConvetionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTemplateDto) GetConvetionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConvetionId.Get(), o.ConvetionId.IsSet()
}

// HasConvetionId returns a boolean if a field has been set.
func (o *TicketTemplateDto) HasConvetionId() bool {
	if o != nil && o.ConvetionId.IsSet() {
		return true
	}

	return false
}

// SetConvetionId gets a reference to the given NullableString and assigns it to the ConvetionId field.
func (o *TicketTemplateDto) SetConvetionId(v string) {
	o.ConvetionId.Set(&v)
}
// SetConvetionIdNil sets the value for ConvetionId to be an explicit nil
func (o *TicketTemplateDto) SetConvetionIdNil() {
	o.ConvetionId.Set(nil)
}

// UnsetConvetionId ensures that no value is present for ConvetionId, not even an explicit nil
func (o *TicketTemplateDto) UnsetConvetionId() {
	o.ConvetionId.Unset()
}

// GetLastEditAuthorId returns the LastEditAuthorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTemplateDto) GetLastEditAuthorId() string {
	if o == nil || IsNil(o.LastEditAuthorId.Get()) {
		var ret string
		return ret
	}
	return *o.LastEditAuthorId.Get()
}

// GetLastEditAuthorIdOk returns a tuple with the LastEditAuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTemplateDto) GetLastEditAuthorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastEditAuthorId.Get(), o.LastEditAuthorId.IsSet()
}

// HasLastEditAuthorId returns a boolean if a field has been set.
func (o *TicketTemplateDto) HasLastEditAuthorId() bool {
	if o != nil && o.LastEditAuthorId.IsSet() {
		return true
	}

	return false
}

// SetLastEditAuthorId gets a reference to the given NullableString and assigns it to the LastEditAuthorId field.
func (o *TicketTemplateDto) SetLastEditAuthorId(v string) {
	o.LastEditAuthorId.Set(&v)
}
// SetLastEditAuthorIdNil sets the value for LastEditAuthorId to be an explicit nil
func (o *TicketTemplateDto) SetLastEditAuthorIdNil() {
	o.LastEditAuthorId.Set(nil)
}

// UnsetLastEditAuthorId ensures that no value is present for LastEditAuthorId, not even an explicit nil
func (o *TicketTemplateDto) UnsetLastEditAuthorId() {
	o.LastEditAuthorId.Unset()
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *TicketTemplateDto) GetAuthorId() string {
	if o == nil || IsNil(o.AuthorId) {
		var ret string
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTemplateDto) GetAuthorIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorId) {
		return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *TicketTemplateDto) HasAuthorId() bool {
	if o != nil && !IsNil(o.AuthorId) {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given string and assigns it to the AuthorId field.
func (o *TicketTemplateDto) SetAuthorId(v string) {
	o.AuthorId = &v
}

func (o TicketTemplateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketTemplateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Avaliable) {
		toSerialize["avaliable"] = o.Avaliable
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if o.ConvetionId.IsSet() {
		toSerialize["convetionId"] = o.ConvetionId.Get()
	}
	if o.LastEditAuthorId.IsSet() {
		toSerialize["lastEditAuthorId"] = o.LastEditAuthorId.Get()
	}
	if !IsNil(o.AuthorId) {
		toSerialize["authorId"] = o.AuthorId
	}
	return toSerialize, nil
}

type NullableTicketTemplateDto struct {
	value *TicketTemplateDto
	isSet bool
}

func (v NullableTicketTemplateDto) Get() *TicketTemplateDto {
	return v.value
}

func (v *NullableTicketTemplateDto) Set(val *TicketTemplateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketTemplateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketTemplateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketTemplateDto(val *TicketTemplateDto) *NullableTicketTemplateDto {
	return &NullableTicketTemplateDto{value: val, isSet: true}
}

func (v NullableTicketTemplateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketTemplateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


